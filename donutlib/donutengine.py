# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
donutengine calculates out of focus stars from a pupil plane Zernike expansion, for the DECam, Aaron Roodman SLAC National Accelerator Laboratory, Stanford University, 2012
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_donutengine', [dirname(__file__)])
        except ImportError:
            import _donutengine
            return _donutengine
        if fp is not None:
            try:
                _mod = imp.load_module('_donutengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _donutengine = swig_import_helper()
    del swig_import_helper
else:
    import _donutengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _donutengine.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator const * value




        """
        return _donutengine.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        Parameters:
           n: size_t value

           n: size_t value

           n: size_t value

           n: size_t value

        incr(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value


        """
        return _donutengine.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        Parameters:
           n: size_t value

           n: size_t value

           n: size_t value

           n: size_t value

        decr(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value


        """
        return _donutengine.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, SwigPyIterator x) -> ptrdiff_t
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _donutengine.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _donutengine.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator const * value




        """
        return _donutengine.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _donutengine.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _donutengine.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject
        Parameters:
           self: swig::SwigPyIterator * value




        """
        return _donutengine.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _donutengine.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _donutengine.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, SwigPyIterator x) -> bool
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _donutengine.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _donutengine.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _donutengine.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           self: swig::SwigPyIterator const * value
           n: ptrdiff_t value

           n: ptrdiff_t value

        """
        return _donutengine.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        Parameters:
           n: ptrdiff_t value

           n: ptrdiff_t value

        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        Parameters:
           self: swig::SwigPyIterator const * value
           x: swig::SwigPyIterator const & value

           x: swig::SwigPyIterator const & value

        """
        return _donutengine.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _donutengine.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> IntVector
        Parameters:
           self: std::vector< int > * value
           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

        """
        return _donutengine.IntVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, IntVector v = std::vector< int,std::allocator< int > >())
        Parameters:
           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value
           v: std::vector< int,std::allocator< int > > const & value

           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value
           v: std::vector< int,std::allocator< int > > const & value

        __setslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< int > * value
           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

        """
        return _donutengine.IntVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< int > * value
           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

           i: std::vector< int >::difference_type value
           j: std::vector< int >::difference_type value

        """
        return _donutengine.IntVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< int >::difference_type value

           i: std::vector< int >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< int > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _donutengine.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> IntVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< int > const * value
           i: std::vector< int >::difference_type value

           i: std::vector< int >::difference_type value

        """
        return _donutengine.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, IntVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< int,std::allocator< int > > const & value

           slice: PySliceObject * value
           v: std::vector< int,std::allocator< int > > const & value

        __setitem__(self, PySliceObject slice)
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< int > * value
           i: std::vector< int >::difference_type value
           x: std::vector< int >::value_type const & value

           i: std::vector< int >::difference_type value
           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< int > * value
           x: std::vector< int >::value_type const & value

           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_clear(self)

    def swap(self, *args):
        """
        swap(self, IntVector v)
        Parameters:
           self: std::vector< int > * value
           v: std::vector< int > & value

           v: std::vector< int > & value

        """
        return _donutengine.IntVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< int > * value




        """
        return _donutengine.IntVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< int >::iterator value

           pos: std::vector< int >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< int > * value
           first: std::vector< int >::iterator value
           last: std::vector< int >::iterator value

           first: std::vector< int >::iterator value
           last: std::vector< int >::iterator value

        """
        return _donutengine.IntVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> IntVector
        __init__(self, IntVector arg0) -> IntVector
        Parameters:
           : std::vector< int > const & value

           : std::vector< int > const & value

        __init__(self, size_type size) -> IntVector
        Parameters:
           size: std::vector< int >::size_type value

           size: std::vector< int >::size_type value

        __init__(self, size_type size, value_type value) -> IntVector
        Parameters:
           size: std::vector< int >::size_type value
           value: std::vector< int >::value_type const & value

           size: std::vector< int >::size_type value
           value: std::vector< int >::value_type const & value

        """
        this = _donutengine.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< int > * value
           x: std::vector< int >::value_type const & value

           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< int > * value
           n: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

           n: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< int >::size_type value

           new_size: std::vector< int >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< int > * value
           new_size: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

           new_size: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< int >::iterator value
           x: std::vector< int >::value_type const & value

           pos: std::vector< int >::iterator value
           x: std::vector< int >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< int > * value
           pos: std::vector< int >::iterator value
           n: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

           pos: std::vector< int >::iterator value
           n: std::vector< int >::size_type value
           x: std::vector< int >::value_type const & value

        """
        return _donutengine.IntVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< int > * value
           n: std::vector< int >::size_type value

           n: std::vector< int >::size_type value

        """
        return _donutengine.IntVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< int > const * value




        """
        return _donutengine.IntVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _donutengine.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> DoubleVector
        Parameters:
           self: std::vector< double > * value
           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

        """
        return _donutengine.DoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, DoubleVector v = std::vector< double,std::allocator< double > >())
        Parameters:
           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value
           v: std::vector< double,std::allocator< double > > const & value

           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value
           v: std::vector< double,std::allocator< double > > const & value

        __setslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< double > * value
           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

        """
        return _donutengine.DoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< double > * value
           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

           i: std::vector< double >::difference_type value
           j: std::vector< double >::difference_type value

        """
        return _donutengine.DoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< double >::difference_type value

           i: std::vector< double >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< double > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _donutengine.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> DoubleVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< double > const * value
           i: std::vector< double >::difference_type value

           i: std::vector< double >::difference_type value

        """
        return _donutengine.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, DoubleVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< double,std::allocator< double > > const & value

           slice: PySliceObject * value
           v: std::vector< double,std::allocator< double > > const & value

        __setitem__(self, PySliceObject slice)
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< double > * value
           i: std::vector< double >::difference_type value
           x: std::vector< double >::value_type const & value

           i: std::vector< double >::difference_type value
           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< double > * value
           x: std::vector< double >::value_type const & value

           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_clear(self)

    def swap(self, *args):
        """
        swap(self, DoubleVector v)
        Parameters:
           self: std::vector< double > * value
           v: std::vector< double > & value

           v: std::vector< double > & value

        """
        return _donutengine.DoubleVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< double > * value




        """
        return _donutengine.DoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< double >::iterator value

           pos: std::vector< double >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< double > * value
           first: std::vector< double >::iterator value
           last: std::vector< double >::iterator value

           first: std::vector< double >::iterator value
           last: std::vector< double >::iterator value

        """
        return _donutengine.DoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, DoubleVector arg0) -> DoubleVector
        Parameters:
           : std::vector< double > const & value

           : std::vector< double > const & value

        __init__(self, size_type size) -> DoubleVector
        Parameters:
           size: std::vector< double >::size_type value

           size: std::vector< double >::size_type value

        __init__(self, size_type size, value_type value) -> DoubleVector
        Parameters:
           size: std::vector< double >::size_type value
           value: std::vector< double >::value_type const & value

           size: std::vector< double >::size_type value
           value: std::vector< double >::value_type const & value

        """
        this = _donutengine.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< double > * value
           x: std::vector< double >::value_type const & value

           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< double > * value
           n: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

           n: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< double >::size_type value

           new_size: std::vector< double >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< double > * value
           new_size: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

           new_size: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< double >::iterator value
           x: std::vector< double >::value_type const & value

           pos: std::vector< double >::iterator value
           x: std::vector< double >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< double > * value
           pos: std::vector< double >::iterator value
           n: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

           pos: std::vector< double >::iterator value
           n: std::vector< double >::size_type value
           x: std::vector< double >::value_type const & value

        """
        return _donutengine.DoubleVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< double > * value
           n: std::vector< double >::size_type value

           n: std::vector< double >::size_type value

        """
        return _donutengine.DoubleVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< double > const * value




        """
        return _donutengine.DoubleVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _donutengine.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector___len__(self)

    def pop(self):
        """
        pop(self) -> value_type
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> StringVector
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

        """
        return _donutengine.StringVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, StringVector v = std::vector< std::string,std::allocator< std::string > >())
        Parameters:
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value
           v: std::vector< std::string,std::allocator< std::string > > const & value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value
           v: std::vector< std::string,std::allocator< std::string > > const & value

        __setslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

        """
        return _donutengine.StringVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value
           j: std::vector< std::string >::difference_type value

        """
        return _donutengine.StringVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        Parameters:
           i: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value

        __delitem__(self, PySliceObject slice)
        Parameters:
           self: std::vector< std::string > * value
           slice: PySliceObject * value

           slice: PySliceObject * value

        """
        return _donutengine.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> StringVector
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __getitem__(self, difference_type i) -> value_type
        Parameters:
           self: std::vector< std::string > const * value
           i: std::vector< std::string >::difference_type value

           i: std::vector< std::string >::difference_type value

        """
        return _donutengine.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, StringVector v)
        Parameters:
           slice: PySliceObject * value
           v: std::vector< std::string,std::allocator< std::string > > const & value

           slice: PySliceObject * value
           v: std::vector< std::string,std::allocator< std::string > > const & value

        __setitem__(self, PySliceObject slice)
        Parameters:
           slice: PySliceObject * value

           slice: PySliceObject * value

        __setitem__(self, difference_type i, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           i: std::vector< std::string >::difference_type value
           x: std::vector< std::string >::value_type const & value

           i: std::vector< std::string >::difference_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           x: std::vector< std::string >::value_type const & value

           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_clear(self)

    def swap(self, *args):
        """
        swap(self, StringVector v)
        Parameters:
           self: std::vector< std::string > * value
           v: std::vector< std::string > & value

           v: std::vector< std::string > & value

        """
        return _donutengine.StringVector_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_rend(self)

    def pop_back(self):
        """
        pop_back(self)
        Parameters:
           self: std::vector< std::string > * value




        """
        return _donutengine.StringVector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        Parameters:
           pos: std::vector< std::string >::iterator value

           pos: std::vector< std::string >::iterator value

        erase(self, iterator first, iterator last) -> iterator
        Parameters:
           self: std::vector< std::string > * value
           first: std::vector< std::string >::iterator value
           last: std::vector< std::string >::iterator value

           first: std::vector< std::string >::iterator value
           last: std::vector< std::string >::iterator value

        """
        return _donutengine.StringVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringVector
        __init__(self, StringVector arg0) -> StringVector
        Parameters:
           : std::vector< std::string > const & value

           : std::vector< std::string > const & value

        __init__(self, size_type size) -> StringVector
        Parameters:
           size: std::vector< std::string >::size_type value

           size: std::vector< std::string >::size_type value

        __init__(self, size_type size, value_type value) -> StringVector
        Parameters:
           size: std::vector< std::string >::size_type value
           value: std::vector< std::string >::value_type const & value

           size: std::vector< std::string >::size_type value
           value: std::vector< std::string >::value_type const & value

        """
        this = _donutengine.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           x: std::vector< std::string >::value_type const & value

           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_front(self)

    def back(self):
        """
        back(self) -> value_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        Parameters:
           new_size: std::vector< std::string >::size_type value

           new_size: std::vector< std::string >::size_type value

        resize(self, size_type new_size, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           new_size: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           new_size: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        Parameters:
           pos: std::vector< std::string >::iterator value
           x: std::vector< std::string >::value_type const & value

           pos: std::vector< std::string >::iterator value
           x: std::vector< std::string >::value_type const & value

        insert(self, iterator pos, size_type n, value_type x)
        Parameters:
           self: std::vector< std::string > * value
           pos: std::vector< std::string >::iterator value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

           pos: std::vector< std::string >::iterator value
           n: std::vector< std::string >::size_type value
           x: std::vector< std::string >::value_type const & value

        """
        return _donutengine.StringVector_insert(self, *args)

    def reserve(self, *args):
        """
        reserve(self, size_type n)
        Parameters:
           self: std::vector< std::string > * value
           n: std::vector< std::string >::size_type value

           n: std::vector< std::string >::size_type value

        """
        return _donutengine.StringVector_reserve(self, *args)

    def capacity(self):
        """
        capacity(self) -> size_type
        Parameters:
           self: std::vector< std::string > const * value




        """
        return _donutengine.StringVector_capacity(self)

    __swig_destroy__ = _donutengine.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _donutengine.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringToStringMap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToStringMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_keys(self)

    def values(self):
        """
        values(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_values(self)

    def items(self):
        """
        items(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key)
        Parameters:
           key: std::map< std::string,std::string >::key_type const & value

           key: std::map< std::string,std::string >::key_type const & value

        __setitem__(self, key_type key, mapped_type x)
        Parameters:
           self: std::map< std::string,std::string > * value
           key: std::map< std::string,std::string >::key_type const & value
           x: std::map< std::string,std::string >::mapped_type const & value

           key: std::map< std::string,std::string >::key_type const & value
           x: std::map< std::string,std::string >::mapped_type const & value

        """
        return _donutengine.StringToStringMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(self) -> PyObject
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> StringToStringMap
        Parameters:
           : std::less< std::string > const & value

           : std::less< std::string > const & value

        __init__(self) -> StringToStringMap
        __init__(self, StringToStringMap arg0) -> StringToStringMap
        Parameters:
           arg1: std::map< std::string,std::string > const & value

           : std::map< std::string,std::string > const & value

        """
        this = _donutengine.new_StringToStringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_clear(self)

    def swap(self, *args):
        """
        swap(self, StringToStringMap v)
        Parameters:
           self: std::map< std::string,std::string > * value
           v: std::map< std::string,std::string > & value

           v: std::map< std::string,std::string > & value

        """
        return _donutengine.StringToStringMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::map< std::string,std::string > const * value




        """
        return _donutengine.StringToStringMap_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,std::string > * value




        """
        return _donutengine.StringToStringMap_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type
        Parameters:
           self: std::map< std::string,std::string > const * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        Parameters:
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        erase(self, iterator position)
        Parameters:
           position: std::map< std::string,std::string >::iterator value

           position: std::map< std::string,std::string >::iterator value

        erase(self, iterator first, iterator last)
        Parameters:
           self: std::map< std::string,std::string > * value
           first: std::map< std::string,std::string >::iterator value
           last: std::map< std::string,std::string >::iterator value

           first: std::map< std::string,std::string >::iterator value
           last: std::map< std::string,std::string >::iterator value

        """
        return _donutengine.StringToStringMap_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,std::string > * value
           x: std::map< std::string,std::string >::key_type const & value

           x: std::map< std::string,std::string >::key_type const & value

        """
        return _donutengine.StringToStringMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToStringMap
    __del__ = lambda self : None;
StringToStringMap_swigregister = _donutengine.StringToStringMap_swigregister
StringToStringMap_swigregister(StringToStringMap)

class StringToIntMap(_object):
    """Proxy of C++ std::map<(std::string,int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToIntMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToIntMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type
        Parameters:
           self: std::map< std::string,int > * value
           key: std::map< std::string,int >::key_type const & value

           key: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)
        Parameters:
           self: std::map< std::string,int > * value
           key: std::map< std::string,int >::key_type const & value

           key: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,int > const * value
           key: std::map< std::string,int >::key_type const & value

           key: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_keys(self)

    def values(self):
        """
        values(self) -> PyObject
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_values(self)

    def items(self):
        """
        items(self) -> PyObject
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,int > * value
           key: std::map< std::string,int >::key_type const & value

           key: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key)
        Parameters:
           key: std::map< std::string,int >::key_type const & value

           key: std::map< std::string,int >::key_type const & value

        __setitem__(self, key_type key, mapped_type x)
        Parameters:
           self: std::map< std::string,int > * value
           key: std::map< std::string,int >::key_type const & value
           x: std::map< std::string,int >::mapped_type const & value

           key: std::map< std::string,int >::key_type const & value
           x: std::map< std::string,int >::mapped_type const & value

        """
        return _donutengine.StringToIntMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(self) -> PyObject
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> StringToIntMap
        Parameters:
           : std::less< std::string > const & value

           : std::less< std::string > const & value

        __init__(self) -> StringToIntMap
        __init__(self, StringToIntMap arg0) -> StringToIntMap
        Parameters:
           arg1: std::map< std::string,int > const & value

           : std::map< std::string,int > const & value

        """
        this = _donutengine.new_StringToIntMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_clear(self)

    def swap(self, *args):
        """
        swap(self, StringToIntMap v)
        Parameters:
           self: std::map< std::string,int > * value
           v: std::map< std::string,int > & value

           v: std::map< std::string,int > & value

        """
        return _donutengine.StringToIntMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::map< std::string,int > const * value




        """
        return _donutengine.StringToIntMap_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,int > * value




        """
        return _donutengine.StringToIntMap_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type
        Parameters:
           self: std::map< std::string,int > const * value
           x: std::map< std::string,int >::key_type const & value

           x: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        Parameters:
           x: std::map< std::string,int >::key_type const & value

           x: std::map< std::string,int >::key_type const & value

        erase(self, iterator position)
        Parameters:
           position: std::map< std::string,int >::iterator value

           position: std::map< std::string,int >::iterator value

        erase(self, iterator first, iterator last)
        Parameters:
           self: std::map< std::string,int > * value
           first: std::map< std::string,int >::iterator value
           last: std::map< std::string,int >::iterator value

           first: std::map< std::string,int >::iterator value
           last: std::map< std::string,int >::iterator value

        """
        return _donutengine.StringToIntMap_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,int > * value
           x: std::map< std::string,int >::key_type const & value

           x: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,int > * value
           x: std::map< std::string,int >::key_type const & value

           x: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,int > * value
           x: std::map< std::string,int >::key_type const & value

           x: std::map< std::string,int >::key_type const & value

        """
        return _donutengine.StringToIntMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToIntMap
    __del__ = lambda self : None;
StringToIntMap_swigregister = _donutengine.StringToIntMap_swigregister
StringToIntMap_swigregister(StringToIntMap)

class StringToDoubleMap(_object):
    """Proxy of C++ std::map<(std::string,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringToDoubleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringToDoubleMap, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap___len__(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args):
        """
        __getitem__(self, key_type key) -> mapped_type
        Parameters:
           self: std::map< std::string,double > * value
           key: std::map< std::string,double >::key_type const & value

           key: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap___getitem__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, key_type key)
        Parameters:
           self: std::map< std::string,double > * value
           key: std::map< std::string,double >::key_type const & value

           key: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap___delitem__(self, *args)

    def has_key(self, *args):
        """
        has_key(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,double > const * value
           key: std::map< std::string,double >::key_type const & value

           key: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap_has_key(self, *args)

    def keys(self):
        """
        keys(self) -> PyObject
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_keys(self)

    def values(self):
        """
        values(self) -> PyObject
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_values(self)

    def items(self):
        """
        items(self) -> PyObject
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_items(self)

    def __contains__(self, *args):
        """
        __contains__(self, key_type key) -> bool
        Parameters:
           self: std::map< std::string,double > * value
           key: std::map< std::string,double >::key_type const & value

           key: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap___contains__(self, *args)

    def key_iterator(self):
        """
        key_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_key_iterator(self)

    def value_iterator(self):
        """
        value_iterator(self) -> SwigPyIterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        """
        __setitem__(self, key_type key)
        Parameters:
           key: std::map< std::string,double >::key_type const & value

           key: std::map< std::string,double >::key_type const & value

        __setitem__(self, key_type key, mapped_type x)
        Parameters:
           self: std::map< std::string,double > * value
           key: std::map< std::string,double >::key_type const & value
           x: std::map< std::string,double >::mapped_type const & value

           key: std::map< std::string,double >::key_type const & value
           x: std::map< std::string,double >::mapped_type const & value

        """
        return _donutengine.StringToDoubleMap___setitem__(self, *args)

    def asdict(self):
        """
        asdict(self) -> PyObject
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_asdict(self)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(std::string)> arg0) -> StringToDoubleMap
        Parameters:
           : std::less< std::string > const & value

           : std::less< std::string > const & value

        __init__(self) -> StringToDoubleMap
        __init__(self, StringToDoubleMap arg0) -> StringToDoubleMap
        Parameters:
           arg1: std::map< std::string,double > const & value

           : std::map< std::string,double > const & value

        """
        this = _donutengine.new_StringToDoubleMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap_empty(self)

    def size(self):
        """
        size(self) -> size_type
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap_size(self)

    def clear(self):
        """
        clear(self)
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_clear(self)

    def swap(self, *args):
        """
        swap(self, StringToDoubleMap v)
        Parameters:
           self: std::map< std::string,double > * value
           v: std::map< std::string,double > & value

           v: std::map< std::string,double > & value

        """
        return _donutengine.StringToDoubleMap_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type
        Parameters:
           self: std::map< std::string,double > const * value




        """
        return _donutengine.StringToDoubleMap_get_allocator(self)

    def begin(self):
        """
        begin(self) -> iterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_begin(self)

    def end(self):
        """
        end(self) -> iterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator
        Parameters:
           self: std::map< std::string,double > * value




        """
        return _donutengine.StringToDoubleMap_rend(self)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type
        Parameters:
           self: std::map< std::string,double > const * value
           x: std::map< std::string,double >::key_type const & value

           x: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        Parameters:
           x: std::map< std::string,double >::key_type const & value

           x: std::map< std::string,double >::key_type const & value

        erase(self, iterator position)
        Parameters:
           position: std::map< std::string,double >::iterator value

           position: std::map< std::string,double >::iterator value

        erase(self, iterator first, iterator last)
        Parameters:
           self: std::map< std::string,double > * value
           first: std::map< std::string,double >::iterator value
           last: std::map< std::string,double >::iterator value

           first: std::map< std::string,double >::iterator value
           last: std::map< std::string,double >::iterator value

        """
        return _donutengine.StringToDoubleMap_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,double > * value
           x: std::map< std::string,double >::key_type const & value

           x: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,double > * value
           x: std::map< std::string,double >::key_type const & value

           x: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator
        Parameters:
           self: std::map< std::string,double > * value
           x: std::map< std::string,double >::key_type const & value

           x: std::map< std::string,double >::key_type const & value

        """
        return _donutengine.StringToDoubleMap_upper_bound(self, *args)

    __swig_destroy__ = _donutengine.delete_StringToDoubleMap
    __del__ = lambda self : None;
StringToDoubleMap_swigregister = _donutengine.StringToDoubleMap_swigregister
StringToDoubleMap_swigregister(StringToDoubleMap)

class DonutEngine(_object):
    """Proxy of C++ DonutEngine class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DonutEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DonutEngine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, MapStoS inputMapS, MapStoI inputMapI, MapStoD inputMapD) -> DonutEngine
        Parameters:
           inputMapS: MapStoS value
           inputMapI: MapStoI value
           inputMapD: MapStoD value

           inputMapS: MapStoS value
           inputMapI: MapStoI value
           inputMapD: MapStoD value

        """
        this = _donutengine.new_DonutEngine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _donutengine.delete_DonutEngine
    __del__ = lambda self : None;
    def calcPupilFuncFromWFM(self, *args):
        """
        calcPupilFuncFromWFM(self, Matrix wfm)
        Parameters:
           self: DonutEngine * value
           wfm: Matrix & value

           wfm: Matrix & value

        """
        return _donutengine.DonutEngine_calcPupilFuncFromWFM(self, *args)

    def resetTimers(self):
        """
        resetTimers(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_resetTimers(self)

    def printTimers(self):
        """
        printTimers(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_printTimers(self)

    def getvParCurrent(self):
        """
        getvParCurrent(self) -> Vector
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvParCurrent(self)

    def getvDerivatives(self):
        """
        getvDerivatives(self) -> Vector
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvDerivatives(self)

    def savePar(self):
        """
        savePar(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_savePar(self)

    def printOptions(self):
        """
        printOptions(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_printOptions(self)

    def closeFits(self):
        """
        closeFits(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_closeFits(self)

    def calcAll(self, *args):
        """
        calcAll(self, Real par)
        Parameters:
           par: Real * value

           par: Real * value

        calcAll(self, double par)
        Parameters:
           self: DonutEngine * value
           par: double * value

           par: double * value

        """
        return _donutengine.DonutEngine_calcAll(self, *args)

    def calcDerivatives(self, *args):
        """
        calcDerivatives(self, Real image, Real weight)
        Parameters:
           image: Real * value
           weight: Real * value

           image: Real * value
           weight: Real * value

        calcDerivatives(self, double image, double weight)
        Parameters:
           self: DonutEngine * value
           image: double * value
           weight: double * value

           image: double * value
           weight: double * value

        """
        return _donutengine.DonutEngine_calcDerivatives(self, *args)

    def getParCurrent(self):
        """
        getParCurrent(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getParCurrent(self)

    def getDerivatives(self):
        """
        getDerivatives(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getDerivatives(self)

    def setXYDECam(self, *args):
        """
        setXYDECam(self, double x, double y)
        Parameters:
           self: DonutEngine * value
           x: double value
           y: double value

           x: double value
           y: double value

        """
        return _donutengine.DonutEngine_setXYDECam(self, *args)

    def setXYDESI(self, *args):
        """
        setXYDESI(self, double thetax, double thetay)
        Parameters:
           self: DonutEngine * value
           thetax: double value
           thetay: double value

           thetax: double value
           thetay: double value

        """
        return _donutengine.DonutEngine_setXYDESI(self, *args)

    def fillPar(self, *args):
        """
        fillPar(self, double par)
        Parameters:
           self: DonutEngine * value
           par: double * value

           par: double * value

        """
        return _donutengine.DonutEngine_fillPar(self, *args)

    def calcWFMtoImage(self, *args):
        """
        calcWFMtoImage(self, Matrix wfm)
        Parameters:
           wfm: Matrix & value

           wfm: Matrix & value

        calcWFMtoImage(self, double IN_ARRAY2)
        Parameters:
           self: DonutEngine * value
           IN_ARRAY2: double * value

           IN_ARRAY2: double * value

        """
        return _donutengine.DonutEngine_calcWFMtoImage(self, *args)

    def getXaxis(self):
        """
        getXaxis(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getXaxis(self)

    def getYaxis(self):
        """
        getYaxis(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getYaxis(self)

    def getRho(self):
        """
        getRho(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getRho(self)

    def getTheta(self):
        """
        getTheta(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getTheta(self)

    def getPixelBox(self):
        """
        getPixelBox(self) -> MatrixC
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPixelBox(self)

    def getFtsPixel(self):
        """
        getFtsPixel(self) -> MatrixC
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getFtsPixel(self)

    def getPupilMask(self):
        """
        getPupilMask(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPupilMask(self)

    def getPupilWaveZernike(self):
        """
        getPupilWaveZernike(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPupilWaveZernike(self)

    def getPupilFunc(self):
        """
        getPupilFunc(self) -> MatrixC
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPupilFunc(self)

    def getPsfOptics(self):
        """
        getPsfOptics(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPsfOptics(self)

    def getFtsOptics(self):
        """
        getFtsOptics(self) -> MatrixC
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getFtsOptics(self)

    def getPsfAtmos(self):
        """
        getPsfAtmos(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getPsfAtmos(self)

    def getFtsAtmos(self):
        """
        getFtsAtmos(self) -> MatrixC
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getFtsAtmos(self)

    def getConvOpticsAtmosPixel(self):
        """
        getConvOpticsAtmosPixel(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getConvOpticsAtmosPixel(self)

    def getValPixelCenters(self):
        """
        getValPixelCenters(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getValPixelCenters(self)

    def getImage(self):
        """
        getImage(self) -> Matrix
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getImage(self)

    def getZernikeObject(self):
        """
        getZernikeObject(self) -> Zernike
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getZernikeObject(self)

    def getvXaxis(self):
        """
        getvXaxis(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvXaxis(self)

    def getvYaxis(self):
        """
        getvYaxis(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvYaxis(self)

    def getvRho(self):
        """
        getvRho(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvRho(self)

    def getvTheta(self):
        """
        getvTheta(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvTheta(self)

    def getvPixelBox(self):
        """
        getvPixelBox(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPixelBox(self)

    def getvFtsPixel(self):
        """
        getvFtsPixel(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvFtsPixel(self)

    def getvPupilMask(self):
        """
        getvPupilMask(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPupilMask(self)

    def getvPupilWaveZernike(self):
        """
        getvPupilWaveZernike(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPupilWaveZernike(self)

    def getvPupilFunc(self):
        """
        getvPupilFunc(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPupilFunc(self)

    def getvPsfOptics(self):
        """
        getvPsfOptics(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPsfOptics(self)

    def getvFtsOptics(self):
        """
        getvFtsOptics(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvFtsOptics(self)

    def getvPsfAtmos(self):
        """
        getvPsfAtmos(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvPsfAtmos(self)

    def getvFtsAtmos(self):
        """
        getvFtsAtmos(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvFtsAtmos(self)

    def getvConvOpticsAtmosPixel(self):
        """
        getvConvOpticsAtmosPixel(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvConvOpticsAtmosPixel(self)

    def getvValPixelCenters(self):
        """
        getvValPixelCenters(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvValPixelCenters(self)

    def getvImage(self):
        """
        getvImage(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getvImage(self)

    def getScaleFactor(self):
        """
        getScaleFactor(self) -> double
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_getScaleFactor(self)

    def setCalcRzeroDerivativeTrue(self):
        """
        setCalcRzeroDerivativeTrue(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_setCalcRzeroDerivativeTrue(self)

    def setCalcRzeroDerivativeFalse(self):
        """
        setCalcRzeroDerivativeFalse(self)
        Parameters:
           self: DonutEngine * value




        """
        return _donutengine.DonutEngine_setCalcRzeroDerivativeFalse(self)

    __swig_setmethods__["ipar_nEle"] = _donutengine.DonutEngine_ipar_nEle_set
    __swig_getmethods__["ipar_nEle"] = _donutengine.DonutEngine_ipar_nEle_get
    if _newclass:ipar_nEle = _swig_property(_donutengine.DonutEngine_ipar_nEle_get, _donutengine.DonutEngine_ipar_nEle_set)
    __swig_setmethods__["ipar_rzero"] = _donutengine.DonutEngine_ipar_rzero_set
    __swig_getmethods__["ipar_rzero"] = _donutengine.DonutEngine_ipar_rzero_get
    if _newclass:ipar_rzero = _swig_property(_donutengine.DonutEngine_ipar_rzero_get, _donutengine.DonutEngine_ipar_rzero_set)
    __swig_setmethods__["ipar_bkgd"] = _donutengine.DonutEngine_ipar_bkgd_set
    __swig_getmethods__["ipar_bkgd"] = _donutengine.DonutEngine_ipar_bkgd_get
    if _newclass:ipar_bkgd = _swig_property(_donutengine.DonutEngine_ipar_bkgd_get, _donutengine.DonutEngine_ipar_bkgd_set)
    __swig_setmethods__["ipar_ZernikeFirst"] = _donutengine.DonutEngine_ipar_ZernikeFirst_set
    __swig_getmethods__["ipar_ZernikeFirst"] = _donutengine.DonutEngine_ipar_ZernikeFirst_get
    if _newclass:ipar_ZernikeFirst = _swig_property(_donutengine.DonutEngine_ipar_ZernikeFirst_get, _donutengine.DonutEngine_ipar_ZernikeFirst_set)
    __swig_setmethods__["ipar_ZernikeLast"] = _donutengine.DonutEngine_ipar_ZernikeLast_set
    __swig_getmethods__["ipar_ZernikeLast"] = _donutengine.DonutEngine_ipar_ZernikeLast_get
    if _newclass:ipar_ZernikeLast = _swig_property(_donutengine.DonutEngine_ipar_ZernikeLast_get, _donutengine.DonutEngine_ipar_ZernikeLast_set)
    __swig_setmethods__["npar"] = _donutengine.DonutEngine_npar_set
    __swig_getmethods__["npar"] = _donutengine.DonutEngine_npar_get
    if _newclass:npar = _swig_property(_donutengine.DonutEngine_npar_get, _donutengine.DonutEngine_npar_set)
    __swig_setmethods__["_nbin"] = _donutengine.DonutEngine__nbin_set
    __swig_getmethods__["_nbin"] = _donutengine.DonutEngine__nbin_get
    if _newclass:_nbin = _swig_property(_donutengine.DonutEngine__nbin_get, _donutengine.DonutEngine__nbin_set)
    __swig_setmethods__["_nPixels"] = _donutengine.DonutEngine__nPixels_set
    __swig_getmethods__["_nPixels"] = _donutengine.DonutEngine__nPixels_get
    if _newclass:_nPixels = _swig_property(_donutengine.DonutEngine__nPixels_get, _donutengine.DonutEngine__nPixels_set)
    __swig_setmethods__["_pixelOverSample"] = _donutengine.DonutEngine__pixelOverSample_set
    __swig_getmethods__["_pixelOverSample"] = _donutengine.DonutEngine__pixelOverSample_get
    if _newclass:_pixelOverSample = _swig_property(_donutengine.DonutEngine__pixelOverSample_get, _donutengine.DonutEngine__pixelOverSample_set)
    __swig_setmethods__["parNames"] = _donutengine.DonutEngine_parNames_set
    __swig_getmethods__["parNames"] = _donutengine.DonutEngine_parNames_get
    if _newclass:parNames = _swig_property(_donutengine.DonutEngine_parNames_get, _donutengine.DonutEngine_parNames_set)
    __swig_setmethods__["parTitles"] = _donutengine.DonutEngine_parTitles_set
    __swig_getmethods__["parTitles"] = _donutengine.DonutEngine_parTitles_get
    if _newclass:parTitles = _swig_property(_donutengine.DonutEngine_parTitles_get, _donutengine.DonutEngine_parTitles_set)
    __swig_setmethods__["nCallsCalcAll"] = _donutengine.DonutEngine_nCallsCalcAll_set
    __swig_getmethods__["nCallsCalcAll"] = _donutengine.DonutEngine_nCallsCalcAll_get
    if _newclass:nCallsCalcAll = _swig_property(_donutengine.DonutEngine_nCallsCalcAll_get, _donutengine.DonutEngine_nCallsCalcAll_set)
    __swig_setmethods__["nCallsCalcDerivative"] = _donutengine.DonutEngine_nCallsCalcDerivative_set
    __swig_getmethods__["nCallsCalcDerivative"] = _donutengine.DonutEngine_nCallsCalcDerivative_get
    if _newclass:nCallsCalcDerivative = _swig_property(_donutengine.DonutEngine_nCallsCalcDerivative_get, _donutengine.DonutEngine_nCallsCalcDerivative_set)
    __swig_setmethods__["nZernikeSize"] = _donutengine.DonutEngine_nZernikeSize_set
    __swig_getmethods__["nZernikeSize"] = _donutengine.DonutEngine_nZernikeSize_get
    if _newclass:nZernikeSize = _swig_property(_donutengine.DonutEngine_nZernikeSize_get, _donutengine.DonutEngine_nZernikeSize_set)
    __swig_setmethods__["_xDESI"] = _donutengine.DonutEngine__xDESI_set
    __swig_getmethods__["_xDESI"] = _donutengine.DonutEngine__xDESI_get
    if _newclass:_xDESI = _swig_property(_donutengine.DonutEngine__xDESI_get, _donutengine.DonutEngine__xDESI_set)
    __swig_setmethods__["_yDESI"] = _donutengine.DonutEngine__yDESI_set
    __swig_getmethods__["_yDESI"] = _donutengine.DonutEngine__yDESI_get
    if _newclass:_yDESI = _swig_property(_donutengine.DonutEngine__yDESI_get, _donutengine.DonutEngine__yDESI_set)
DonutEngine_swigregister = _donutengine.DonutEngine_swigregister
DonutEngine_swigregister(DonutEngine)

def donutengine(**inputDict):
  """  donutengine class for calculating out-of-focus star images from Zernike pupil basis """

  # special code for scaleFactor - be sure it is a float
  if inputDict.has_key("scaleFactor"):
    inputDict["scaleFactor"] = float(inputDict["scaleFactor"])

  # split inputDict into 3 dictionaries - S,I,D
  paramDictS = {}
  paramDictI = {}
  paramDictD = {}
  for key in inputDict.keys():
    value = inputDict[key]
    if isinstance(value,str):
      paramDictS[key] = value
    elif isinstance(value,int):
      paramDictI[key] = value
    elif isinstance(value,float):
      paramDictD[key] = value
   
  # setup the fit engine
  myDE = DonutEngine(paramDictS,paramDictI,paramDictD)

  return myDE


# This file is compatible with both classic and new-style classes.


